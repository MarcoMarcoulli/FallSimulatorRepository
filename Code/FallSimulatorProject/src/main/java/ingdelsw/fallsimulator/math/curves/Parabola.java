// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------
package ingdelsw.fallsimulator.math.curves;

import ingdelsw.fallsimulator.math.Point;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

public class Parabola extends Curve {

    private static final Logger logger = LogManager.getLogger(Parabola.class);

    private double a;  //parabola coefficient

    public Parabola(Point startPoint, Point endPoint) {
        super(startPoint, endPoint);
        a = intervalX / Math.pow(intervalY, 2);
        logger.info("coefficiente a = {}", a);
    }

    public double getA() {
        return a;
    }

    public double evaluateX(double y) {
        return a * Math.pow(y, 2);
    }

   
    
    public Point[] calculatePoints() {
    	//declaration of an array of points of dimensions NUMPOINTS
    	Point[] points = new Point[NUMPOINTS];
    	double x;
    	double y;
    	double t;
    	double yCubic;
    	for (int i = 0; i < NUMPOINTS; i++) {
    		//t is the index i normalized respect to NUMPOINTS
    		t = (double) i / (NUMPOINTS - 1); 
    		//cubic distribution of points along intervalY
    	    yCubic = intervalY * Math.pow(t, 3);
    	    //addition of startPoint y component
    	    y = startPoint.getY() + yCubic;
    	    //x coordinate evaluation and addition of startPoint x component
    	    x = startPoint.getX() + evaluateX(yCubic);
    	    //add the calculated point to the array	
    	    points[i] = new Point(x, y);
    	    }
    	return points;
    }


    public double[] calculateSlopes() {
        double[] slopes = new double[NUMPOINTS];
        double yCubic;
        double t;
        logger.info("calcolo pendenze parabola");
        for (int i = 0; i < NUMPOINTS; i++) {
            t = (double) i / (NUMPOINTS - 1); 
            yCubic = intervalY * Math.pow(t, 3);
            slopes[i] = Math.PI / 2 - Math.atan(2 * a * yCubic);
            logger.debug("pendenza[{}]: {} ", i, (slopes[i] / Math.PI) * 180);
        }
        return slopes;
    }

    public String curveName() {
        return "parabola";
    }
}

